#!/usr/bin/env node

const program = require('commander')
const pkg = require('../package.json')
const express = require('express')
const bodyParser = require('body-parser')
const chalk = require('chalk')
const { parse } = require('url')
const chokidar = require('chokidar')
const next = require('next')
const { promisify } = require('util')
const path = require('path')

const defaultWatchEvent = 'change'

program.version(pkg.version)
program
  .option('-r, --root [dir]', 'root directory of your nextjs app')
  .option(
    '-s, --script [path]',
    'path to the script you want to trigger on a watcher event',
    false
  )
  .option(
    '-e, --event [name]',
    `name of event to watch, defaults to ${defaultWatchEvent}`,
    defaultWatchEvent
  )
  .parse(process.argv)

const app = next({ dev: true, dir: program.root || process.cwd() })
const port = parseInt(process.env.PORT, 10) || 3000
const handle = app.getRequestHandler()

app.prepare().then(() => {
  // if directories are provided, watch them for changes and trigger reload
  if (program.args.length > 0) {
    chokidar
      .watch(program.args)
      .on(
        program.event,
        async (filePathContext, eventContext = defaultWatchEvent) => {
          app.hotReloader.send('building')

          if (program.script) {
            try {
              // find the path of your --script script
              const scriptPath = path.join(
                process.cwd(),
                program.script.toString()
              )

              // require your --script script
              const executeFile = require(scriptPath)

              // run the exported function from your --comand script
              executeFile(filePathContext, eventContext)
            } catch (e) {
              console.error('Remote script failed')
              console.error(e)
              return e
            }
          }

          app.hotReloader.send('reloadPage')
        }
      )
  }

  // create an express server
  const server = express()
  server.use(bodyParser.json())

  // special handling for mdx reload route
  server.all('/__next_reload', (req, res) => {
    // log message if present
    const msg = req.body.message
    const color = req.body.color
    msg && console.log(color ? chalk[color](msg) : msg)

    // reload the nextjs app
    app.hotReloader.send('building')
    app.hotReloader.send('reloadPage')
    res.end('Reload initiated')
  })

  // handle all other routes with next.js
  server.all('*', (req, res) => handle(req, res, parse(req.url, true)))

  // fire it up
  server.listen(port, (err) => {
    if (err) throw err
    console.log(`> Ready on http://localhost:${port}`)
  })
})
